package main;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

import parsers.*;
import auth.Authenticater;

import rita.RiMarkov;

import twitter4j.Status;
import twitter4j.Twitter;
import twitter4j.TwitterException;

import util.TwitterUserUtilities;

public class TwitterMarkovChain {

	public static final int DEFAULT_N_FACTOR = 3;
	public static final int DEFAULT_NUM_SENTENCES = 10;

	private static HashSet<String> tweetsHash;
	
	private static void printUsageDescription() {
		System.out.println("Usage: java TwitterMarkovChain --generateFromAll [args]");
		System.out.println("Here are the possible arguments you can include.");
		System.out.println("\nREQUIRED (program will fail to run without each of these arguments):\n");
		System.out.println("-u \t\t <string>");
		System.out.println("Specify the username of the Twitter account you want to pull from. Do not add the '@' sign.");
		System.out.println("\nOPTIONAL (specify certain parameters; defaults will be used unless specified here)\n");
		System.out.println("-nfac \t\t <integer>");
		System.out.println("Specify the n-factor used to train the model. Larger values create more coherent outputs;\n"
				+ "smaller values create output that appears more random. Default value is 3.");
		System.out.println("-n \t\t <integer>");
		System.out.println("Specify the number of tweets to generate. Default value is 10.");
		System.out.println("--prompt");
		System.out.println("Include the switch --prompt anywhere in your argument list to see a list of all sentences generated by the program\n"
				+ "and choose via the command line which tweets to post. Omitting --prompt will automatically post all tweets to your timeline.");
	}

	public static void main(String[] args) throws TwitterException, IOException {
		
		if (args.length == 0) {
			printUsageDescription();
			System.exit(0);
		}

		if (args.length > 8 || args.length < 3) 
			throw new RuntimeException("ERROR: Invalid number of arguments.");

		Twitter twitter = TwitterUserUtilities.createTwitterInstance(Authenticater.DEFAULT_AUTH_PATH);

		String twitterUsername = null;
		boolean promptBeforePosting = false;
		int nFactor = -1;	// initialize to -1, exception will be thrown if this is not changed before call to generateSentences()
		int numSentences = -1;
		List<Status> tweets;
		BufferedReader readFromKeyboard;

		/********* --generateFromAll **********/
		if (args[0].equals("--generateFromAll")) {

			/* Populate variables from command line args */
			nFactor = ArgumentParser.getNFactor(args);
			twitterUsername = ArgumentParser.getTwitterUsername(args);
			numSentences = ArgumentParser.getNumSentences(args);
			promptBeforePosting = ArgumentParser.determineIfPrompt(args);

			// Ensure we correctly parsed numSentences
			if (numSentences == -1) {
				System.err.println("Unable to read number of sentences you wish to generate.");
				System.err.println("Check syntax and try again.");
				System.exit(-1);
			}

			// Ensure we correctly parsed twitterUsername
			if (twitterUsername == null) {
				System.err.println("Unable to parse Twitter username. Please check syntax and try again.");
				System.exit(-1);
			}

			/* Get all tweets from user */
			tweets = TwitterUserUtilities.getAllTweetsFromTimeline(twitter, twitterUsername);

			// Create StringBuilder object to concatenate all tweets into single string
			StringBuilder strbuild = new StringBuilder(tweets.size());

			tweetsHash = new HashSet<String>(tweets.size());

			// Concatenate all tweets into a single String to be fed to RiTa (via StringBuilder)
			for (Status status : tweets) {

				String tweet = status.getText();

				// Add the lowercase tweet text to HashSet (compare with lowercase output)
				tweetsHash.add(tweet.toLowerCase());

				try {
					// Remove newlines, "RTs", and URLs (i.e. strings including "http://")
					if (TweetPreParser.needsToBeTrimmed(tweet)){
						tweet = TweetPreParser.trimNonWords(tweet);
					}

					// Confirm that the tweet we're adding isn't just whitespace
					if (! (tweet.equals("") || tweet.equals(" "))){
						strbuild.append(tweet);
					}

				} catch (Exception e) {
					System.out.println("Error parsing Tweet: " + tweet);
					e.printStackTrace();
				}
			}

			/* Sentence generation with RiTa */

			// RiMarkov(Object parent, int nFactor, boolean recognizeSentences, boolean allowDuplicates)
			RiMarkov rm = new RiMarkov(null, nFactor, true, true);
			rm.loadText(strbuild.toString());
			String[] sentences = rm.generateSentences(numSentences);
			ArrayList<String> finalSentencesToPost = new ArrayList<String>(sentences.length);

			for (String sentence : sentences) {
				// Clean up the RiTa-generated sentences
				sentence = TweetPostParser.removeNonAlphaTokens(sentence);
				sentence = TweetPostParser.attachNonAlphaChars(sentence);

				// Only add final output sentence to sentenceList if:
				// - length of total tweet is <=140 characters (tweet max length)
				// - sentence generated isn't a literal copy of something user has already tweeted
				if (sentence.length() < 141 && !tweetsHash.contains(sentence.toLowerCase())) 
					finalSentencesToPost.add(sentence);
			}

			// Either post directly to Twitter or ask user which sentences they wish to post 
			if (! promptBeforePosting) {
				// Post all sentences directly to Twitter
				for (String tweetToPost : finalSentencesToPost) {
					twitter.updateStatus(tweetToPost);
				}
				System.out.println("All tweets posted. Exiting.");
				System.exit(0);
			}

			// Else, print all generated sentences to the screen, let user decide which to publish
			else {

				System.out.println("Printing all generated sentences. At the prompt, enter either a single value OR");
				System.out.println("a comma-separated list of values of sentences to post to Twitter (i.e. '1' or '2,3,6'), or '0' to quit.");

				for (int i = 0; i < finalSentencesToPost.size(); i++) {
					System.out.println(i+1 + ": " + finalSentencesToPost.get(i));
				}

				readFromKeyboard = new BufferedReader(new InputStreamReader(System.in));
				String input = readFromKeyboard.readLine();

				if (input.equals("0")) 
					System.exit(0);

				// If publishing multiple sentences (given a list from user with multiple values)
				if (input.contains(",")) {

					String[] sentencesToPublish = input.split(",");

					// Publish only those sentences chosen by user
					for (int i = 0; i < sentencesToPublish.length; i++) {
						int idx = Integer.parseInt(sentencesToPublish[i]) - 1;
						twitter.updateStatus(finalSentencesToPost.get(idx));
					}
				}

				// Publish the single sentence specified by user
				else 
					twitter.updateStatus(finalSentencesToPost.get(Integer.parseInt(input) - 1));

				System.out.println("Tweets have been posted.");
				System.exit(0);
			}
		}
	}
}
